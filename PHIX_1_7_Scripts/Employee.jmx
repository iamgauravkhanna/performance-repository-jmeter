<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1431352068000</longProp>
        <longProp name="ThreadGroup.end_time">1431352068000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list"/>
        </AuthManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">port</stringProp>
              <stringProp name="Header.value">8080</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">employee.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">data_cre_userId,empcode,tokenIdentifier</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="trf" elementType="Argument">
              <stringProp name="Argument.name">trf</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="exchange" elementType="Argument">
              <stringProp name="Argument.name">exchange</stringProp>
              <stringProp name="Argument.value">ex3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">ex-perf41.demo.hcinternal.net</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">PA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="zip" elementType="Argument">
              <stringProp name="Argument.name">zip</stringProp>
              <stringProp name="Argument.value">15619</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="county" elementType="Argument">
              <stringProp name="Argument.name">county</stringProp>
              <stringProp name="Argument.value">WESTMORELAND</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">Qwerty12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="StateLicenseNo" elementType="Argument">
              <stringProp name="Argument.name">StateLicenseNo</stringProp>
              <stringProp name="Argument.value">99999999</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Company Name" elementType="Argument">
              <stringProp name="Argument.name">Company Name</stringProp>
              <stringProp name="Argument.value">mycompany</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="city" elementType="Argument">
              <stringProp name="Argument.name">city</stringProp>
              <stringProp name="Argument.value">mycity</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address" elementType="Argument">
              <stringProp name="Argument.name">address</stringProp>
              <stringProp name="Argument.value">myadd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SIC" elementType="Argument">
              <stringProp name="Argument.name">SIC</stringProp>
              <stringProp name="Argument.value">MEDICAL AND HOSPITAL EQUIPMENT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="data_cre_userId_test" elementType="Argument">
              <stringProp name="Argument.name">data_cre_userId_test</stringProp>
              <stringProp name="Argument.value">c1773a51-448e-48e6-82dd-2cd6d8834173</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="empcode_test" elementType="Argument">
              <stringProp name="Argument.name">empcode_test</stringProp>
              <stringProp name="Argument.value">6752fcb0-df98-425b-94aa-3e781e318e31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tokenIdentifier_test" elementType="Argument">
              <stringProp name="Argument.name">tokenIdentifier_test</stringProp>
              <stringProp name="Argument.value">e750b42d-9b48-4459-9c1a-b327786e80a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="email_test" elementType="Argument">
              <stringProp name="Argument.name">email_test</stringProp>
              <stringProp name="Argument.value">kgghurt@gus.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="fname_test" elementType="Argument">
              <stringProp name="Argument.name">fname_test</stringProp>
              <stringProp name="Argument.value">lelggdi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="timer" elementType="Argument">
              <stringProp name="Argument.name">timer</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">500</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">userId</stringProp>
          <stringProp name="CounterConfig.format">1</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="BSF Sampler-readIndividualFile" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;fname&quot;,&quot;${__RandomString(5,asdfghjklqwertyuiopzxcvbnm,)}&quot;);
vars.put(&quot;lname&quot;,&quot;${__RandomString(3,asdfghjklqwertyuiopzxcvbnm,)}&quot;);
String fname = vars.get(&quot;fname&quot;);
String lname = vars.get(&quot;lname&quot;);


String email = fname+lname+&quot;@&quot;+lname+&quot;.com&quot;;
vars.put(&quot;email&quot;,email);

System.out.println(&quot;test value:&quot;+email);

//vars.put(&quot;email&quot;,fname+lname+&quot;@&quot;+&quot;${__threadNum()}_${__time(YMD)}${__time(HMSs)}.com&quot;);
vars.put(&quot;ssnspa&quot;,&quot;${__Random(100000001,999999999,)}&quot;);


String data = vars.get(&quot;data_cre_userId&quot;);
String emp = vars.get(&quot;empcode&quot;);
String token = vars.get(&quot;tokenIdentifier&quot;);
//System.out.println(&quot;MyVal value:&quot;+data+&quot;:&quot;+emp);


</stringProp>
          <stringProp name="scriptLanguage">beanshell</stringProp>
        </BSFSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Register" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/employee/register" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="registrationCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">registrationCode</stringProp>
                  <stringProp name="Argument.value">${data_cre_userId}%7C${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tokenIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tokenIdentifier</stringProp>
                  <stringProp name="Argument.value">${tokenIdentifier}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/employee/employee/register</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrfINIT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrfINIT</stringProp>
              <stringProp name="RegexExtractor.regex">input type=&quot;hidden&quot; name=&quot;CSRFToken&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">csrfINIT NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/employee/register?registrationCode=${data_cre_userId}%7C${empcode}&amp;tokenIdentifier=${tokenIdentifier}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="employeeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">employeeId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isProspective" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isProspective</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userName</stringProp>
                  <stringProp name="Argument.value">${email}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirmPassword" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">confirmPassword</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].securityQuestion.id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].securityQuestion.id</stringProp>
                  <stringProp name="Argument.value">287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].securityAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].securityAnswer</stringProp>
                  <stringProp name="Argument.value">Kabuter</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].customSecurityQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].customSecurityQuestion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].securityQuestion.id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].securityQuestion.id</stringProp>
                  <stringProp name="Argument.value">286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].securityAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].securityAnswer</stringProp>
                  <stringProp name="Argument.value">Marcgyu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].customSecurityQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].customSecurityQuestion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tokenIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tokenIdentifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="extClientIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">extClientIdentifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CSRFToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CSRFToken</stringProp>
                  <stringProp name="Argument.value">${csrfINIT}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/employee/register?registrationCode=${data_cre_userId}%7C${empcode}&amp;tokenIdentifier=${tokenIdentifier}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/employee/register?registrationCode=${data_cre_userId}|${empcode}&amp;tokenIdentifier=${tokenIdentifier}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrf" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrf</stringProp>
              <stringProp name="RegexExtractor.regex">GlobalVars\[&quot;CSRFToken&quot;\] = &quot;(.+?)&quot;;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">csrf NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371759859</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/information</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/view/section/introduction/page/benefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371760600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/view/section/introduction/page/benefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/section/introduction/page/benefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371761277</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/section/introduction/page/benefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Welcome to Fidelity Health Marketplace!" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/section/introduction/page/benefitSummary/?_dp=1434371785708&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;declineAllProductCategories&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/section/introduction/page/benefitSummary/?_dp=1434371785708&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/view/section/aboutYou/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371786626</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/view/section/aboutYou/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/section/aboutYou/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371787581</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/section/aboutYou/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/template/hc-validation-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/template/hc-validation-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Do you have a spouse or domestic partner that you&apos;d like covered?" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/section/aboutYou/page/dependentInfo/?_dp=1434371807483&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:true,&quot;coveredMembers&quot;:[],&quot;gender&quot;:null,&quot;dateOfBirth&quot;:null,&quot;smoker&quot;:null,&quot;hasSpouse&quot;:true,&quot;hasDependents&quot;:true,&quot;name&quot;:null,&quot;address&quot;:null,&quot;employeeFamilyMembers&quot;:[{&quot;name&quot;:{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Bharadwaj&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;12/22/1990&quot;,&quot;smoker&quot;:true,&quot;familyMemberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SPOUSE&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;id&quot;:2,&quot;wigCode&quot;:&quot;SPOUSE&quot;,&quot;dsiplayName&quot;:&quot;Spouse&quot;,&quot;spouse&quot;:true,&quot;self&quot;:false,&quot;dependent&quot;:false},&quot;isSmoker&quot;:true},{&quot;name&quot;:{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Kumar&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;01/10/2011&quot;,&quot;smoker&quot;:false,&quot;familyMemberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:&quot;Child&quot;,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;isSmoker&quot;:false},{&quot;name&quot;:{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Sharma&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;01/10/2014&quot;,&quot;smoker&quot;:true,&quot;familyMemberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:&quot;Child&quot;,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;isSmoker&quot;:true}],&quot;responseSummary&quot;:null,&quot;isSmoker&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/section/aboutYou/page/dependentInfo/?_dp=1434371807483&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/view/section/aboutYou/page/choosePath/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371808249</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/view/section/aboutYou/page/choosePath/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/section/aboutYou/page/choosePath/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371808895</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/section/aboutYou/page/choosePath/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Let&apos;s get started with your plan selection. What would you like to do" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/section/aboutYou/page/choosePath/?_dp=1434371820404&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isDSSFlow&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/section/aboutYou/page/choosePath/?_dp=1434371820404&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/view/section/medicalPlan/page/plans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371821197</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/view/section/medicalPlan/page/plans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/section/medicalPlan/page/plans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371822177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/section/medicalPlan/page/plans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" We&apos;ve found the following plans for you_med" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371837805</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/section/medicalPlan/page/plans/?_dp=1434371837805&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Marketplace Extra 3&quot;,&quot;amount&quot;:&quot;51.00&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:false,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:&quot;Silver&quot;,&quot;individualDeductible&quot;:&quot;NA&quot;,&quot;familyDeductible&quot;:&quot;NA&quot;,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://www.dol.gov/ebsa/pdf/correctedsamplecompletedsbc2.pdf&quot;,&quot;benefitCoverageLink&quot;:&quot;${trf}://www.dol.gov/ebsa/pdf/CorrectedSampleCompletedSBC2.pdf&quot;,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;outOfPocketMaximumValue&quot;:&quot;NA&quot;,&quot;deductible&quot;:&quot;NA&quot;,&quot;prescriptionDrugsCoveredLink&quot;:null,&quot;primaryPhysicianOfficeVisit&quot;:&quot;NA&quot;,&quot;specialistVisit&quot;:&quot;NA&quot;,&quot;erVisit&quot;:&quot;NA&quot;,&quot;urgentCareFacility&quot;:&quot;NA&quot;,&quot;hospitalInPatient&quot;:&quot;NA&quot;,&quot;hospitalOutPatient&quot;:&quot;NA&quot;,&quot;genericPrescription&quot;:&quot;NA&quot;,&quot;brandNamePrescription&quot;:&quot;NA&quot;},&quot;primaryPhysicianOfficeVisit&quot;:&quot;NA&quot;,&quot;isRestrictedDoctorNetwork&quot;:true,&quot;isReferralsNeeded&quot;:false,&quot;isAllowForFamilyDeductible&quot;:true,&quot;taxSavingLabel&quot;:&quot;noAdditionalTaxSaving&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/section/medicalPlan/page/plans/?_dp=1434371837805&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/view/section/taxSavings/page/hsaPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371839815</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/view/section/taxSavings/page/hsaPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/medical/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371839818</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/medical/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371841560</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" How much would you like to invest each year? " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/?_dp=1434371854092&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Health Savings Account&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;99999&quot;,&quot;productCategory&quot;:&quot;HSA&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;8f354fbd-72f3-4716-8a54-a3bcf5399ba5&quot;,&quot;planCode&quot;:&quot;99999HSA&quot;,&quot;issuerCode&quot;:&quot;99011&quot;,&quot;carrierName&quot;:&quot;99999&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:false,&quot;employeeContribution&quot;:&quot;-49&quot;,&quot;employerContribution&quot;:&quot;54&quot;,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;totalMaximumContribution&quot;:&quot;5&quot;,&quot;taxSavingEstimationFactor&quot;:&quot;27.00&quot;,&quot;deductable&quot;:&quot;0&quot;,&quot;payPerPeriodFactor&quot;:&quot;0.23076923076923078&quot;,&quot;annualMinimumLimit&quot;:&quot;0&quot;,&quot;annualMaximumLimit&quot;:&quot;-49&quot;,&quot;planDetail&quot;:{&quot;reimbursement&quot;:&quot;Debit Card&quot;,&quot;runOutPeriod&quot;:null,&quot;fdicInsured&quot;:&quot;Yes or No&quot;,&quot;investmentOptions&quot;:&quot;Consumer can invest account balances over $2,000 in Mutual Funds&quot;,&quot;rollOverAmount&quot;:&quot;&quot;,&quot;gracePeriod&quot;:&quot;NA&quot;,&quot;rollOverOrGracePeriod&quot;:null,&quot;guideLink&quot;:null,&quot;brochureLink&quot;:null,&quot;disclaimer&quot;:&quot;The Bank details page is a summary for informational purposes only. The information in the summary has been provided by the HSA administrators identified above. Because this information changes frequently, check with the relevant HSA administrator to confirm its accuracy. You should also review your chosen HSA administrator&apos;s enrollment documents for a more detailed description of current requirements, fees and investment options. Only the terms and conditions listed in your enrollment documents are binding.&quot;}}],&quot;employeePlanFlow&quot;:[{&quot;pageLabel&quot;:&quot;Health Savings Account&quot;,&quot;isBlocked&quot;:true,&quot;isSelected&quot;:true,&quot;isDefault&quot;:null,&quot;planCount&quot;:null,&quot;helpText&quot;:&quot;You can contribute pre-tax dollars to a Health Savings Account to pay for qualified expenses. This money is yours and rolls over from year to year.To choose an HSA, you must have a qualified High Deductible Health Plan. You should know that you cannot choose an FSA if you choose an HSA, but you can choose a LPFSA.&quot;,&quot;productCategory&quot;:&quot;HSA&quot;}],&quot;waivedProductCategoryName&quot;:null,&quot;isWaivedCoverage&quot;:false,&quot;blockedTextLabel&quot;:&quot;label.employee.taxSaving.HSA.blocked&quot;,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/?_dp=1434371854092&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/dentalPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371854892</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/dentalPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371856351</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | dent" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/?_dp=1434371868945&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;amount&quot;:&quot;38.42&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;individualDeductible&quot;:&quot;$4.00&quot;,&quot;familyDeductible&quot;:&quot;$33.00&quot;,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://yyy.ttt.com&quot;,&quot;benefitCoverageLink&quot;:&quot;yyy.ttt.com&quot;,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;orthodontiaMax&quot;:&quot;NA&quot;,&quot;routineDentalCare&quot;:&quot;NA&quot;,&quot;basicDentalCare&quot;:&quot;NA&quot;,&quot;majorDentalCare&quot;:&quot;NA&quot;,&quot;orthodontia&quot;:&quot;NA&quot;},&quot;annualBenefitMaximum&quot;:&quot;$777.00&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/?_dp=1434371868945&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371868945</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/visionPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371869777</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/visionPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/dental/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371869781</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/dental/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371871003</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Vision" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/?_dp=1434371883340&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Vision Plan New Labels&quot;,&quot;amount&quot;:&quot;33.81&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;individualDeductible&quot;:null,&quot;familyDeductible&quot;:null,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://yyy.ttt.com&quot;,&quot;benefitCoverageLink&quot;:null,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;polycarbonateLenses&quot;:&quot;6&quot;,&quot;antiReflectiveLenses&quot;:&quot;NA&quot;,&quot;scratchCoatingLenses&quot;:&quot;8&quot;,&quot;standardProgressiveLenses&quot;:&quot;9&quot;,&quot;lasikCareProgram&quot;:&quot;5&quot;},&quot;visionExamination&quot;:&quot;7&quot;,&quot;opticalLenses&quot;:&quot;3&quot;,&quot;contactLenses&quot;:&quot;4&quot;,&quot;frames&quot;:&quot;7&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/?_dp=1434371883340&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/lifePlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371884109</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/lifePlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371883340</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/vision/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371884114</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/vision/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371885032</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Life_Anci" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/?_dp=1434371919174&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Convantary Basic Life H4&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;97a2ad05-ac76-405e-8204-2765c8b1fd53&quot;,&quot;planCode&quot;:&quot;80010${state}0089999&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;planBrochureUrl&quot;:&quot;www.bluesky.com/planbrochures.pdf&quot;,&quot;employerName&quot;:&quot;${Company Name}&quot;,&quot;coverageReductionApplied&quot;:false,&quot;coveragePremiumInfoMap&quot;:{&quot;SELF&quot;:[{&quot;coverageOption&quot;:null,&quot;coverageAmount&quot;:1000,&quot;premium&quot;:0,&quot;coverageAmountGreaterThanGuaranteedAmount&quot;:false,&quot;correspondingBasicPlanCoverageAmount&quot;:0}]}}],&quot;employeePlanFlow&quot;:[{&quot;pageLabel&quot;:&quot;Dental&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;},{&quot;pageLabel&quot;:&quot;Vision&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;},{&quot;pageLabel&quot;:&quot;Life&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:true,&quot;isDefault&quot;:true,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;},{&quot;pageLabel&quot;:&quot;Commuter&quot;,&quot;isBlocked&quot;:null,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;}],&quot;waivedProductCategoryName&quot;:null,&quot;isWaivedCoverage&quot;:false,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/?_dp=1434371919174&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/commuterPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371920872</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/commuterPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371921672</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Commuter" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/?_dp=1434371937368&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;TransitCheck Premium&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;99998&quot;,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;carrierName&quot;:&quot;99998&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:&quot;0&quot;,&quot;employeeParkingContribution&quot;:&quot;0&quot;,&quot;levelOfCoverage&quot;:null,&quot;preTaxTransitLimit&quot;:&quot;130&quot;,&quot;preTaxParkingLimit&quot;:&quot;250&quot;,&quot;employerTransitContribution&quot;:&quot;56&quot;,&quot;employerParkingContribution&quot;:&quot;54&quot;,&quot;payPerPeriodFactor&quot;:&quot;0.23076923076923078&quot;}],&quot;coveredMembers&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/?_dp=1434371937368&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/view/section/checkOut/page/reviewBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371938107</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/view/section/checkOut/page/reviewBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371937368</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371938941</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OK, great. Here&apos;s everything you selected" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/?_dp=1434371973745&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;productCategoryBenefits&quot;:[{&quot;productCategory&quot;:&quot;medical&quot;,&quot;productCategoryDisplayName&quot;:&quot;Medical&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;productCategory&quot;:&quot;medical&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:&quot;POS&quot;},&quot;employeeContribution&quot;:&quot;51.00&quot;,&quot;employerContribution&quot;:&quot;51.00&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;51.00&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;51.00&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;HSA&quot;,&quot;productCategoryDisplayName&quot;:&quot;HSA&quot;,&quot;selectedPlans&quot;:null,&quot;offeredPlans&quot;:{&quot;issuerName&quot;:&quot;Discovery Benefits&quot;,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Health Savings Account&quot;,&quot;productCategory&quot;:null,&quot;additionalAttributes&quot;:{&quot;Annual Contribution&quot;:&quot;$0&quot;},&quot;employeeContribution&quot;:&quot;NA&quot;,&quot;employerContribution&quot;:&quot;--&quot;,&quot;enrolledMembers&quot;:[]}]},&quot;categoryWiseEmployeeContribution&quot;:&quot;NA&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;--&quot;,&quot;showDeclinePlan&quot;:false,&quot;showChangePlan&quot;:false,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;dental&quot;,&quot;productCategoryDisplayName&quot;:&quot;Dental&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;productCategory&quot;:&quot;dental&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:&quot;HMO&quot;},&quot;employeeContribution&quot;:&quot;38.42&quot;,&quot;employerContribution&quot;:&quot;38.42&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;38.42&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;38.42&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;vision&quot;,&quot;productCategoryDisplayName&quot;:&quot;Vision&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;productCategory&quot;:&quot;vision&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:null},&quot;employeeContribution&quot;:&quot;33.81&quot;,&quot;employerContribution&quot;:&quot;43.03&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;33.81&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;43.03&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;productCategoryDisplayName&quot;:&quot;Life&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Convantary Basic Life H4&quot;,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;additionalAttributes&quot;:{&quot;Amount&quot;:&quot;$1,000.00&quot;},&quot;employeeContribution&quot;:&quot;0&quot;,&quot;employerContribution&quot;:&quot;0.12&quot;,&quot;enrolledMembers&quot;:[]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;0.00&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;.12&quot;,&quot;showDeclinePlan&quot;:false,&quot;showChangePlan&quot;:false,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;commuter&quot;,&quot;productCategoryDisplayName&quot;:&quot;Commuter&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:null},&quot;employeeContribution&quot;:&quot;0.0&quot;,&quot;employerContribution&quot;:&quot;110.00&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;0.0&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;110.00&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false}],&quot;totalEmployeeContribution&quot;:&quot;123.23&quot;,&quot;totalEmployerContribution&quot;:&quot;242.57&quot;,&quot;checkoutEnabled&quot;:true,&quot;showSkip&quot;:false,&quot;showBack&quot;:false,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/?_dp=1434371973745&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identifier</stringProp>
              <stringProp name="RegexExtractor.regex">workflow/checkout/(.+?)&quot;,&quot;allSections</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identifier NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutEmployeeInfo/page/checkout/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371977904</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutEmployeeInfo/page/checkout/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/checkout/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371978790</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/checkout/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Countinue" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/checkout/?_dp=1434371994043&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/checkout/?_dp=1434371994043&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutEmployeeInfo/page/employeeInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371994976</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutEmployeeInfo/page/employeeInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/template/hc-ssn" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/template/hc-ssn</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/information</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/employeeInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/employeeInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssnq" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ssnq</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ssn&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ssnq NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/configurations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/configurations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/web/utility/validateZipCode/${zip}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371998971</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/web/utility/validateZipCode/${zip}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/employeeInfo/?_dp=1434372054873&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:&quot;Sr&quot;,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${empcode}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:25,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Upadhyay&quot;,&quot;ssn&quot;:&quot;${ssnq}&quot;,&quot;dob&quot;:&quot;02/24/1990&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Male&quot;,&quot;userNotificationPreference&quot;:&quot;Mail&quot;,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;PRIMARY&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SELF&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;id&quot;:1,&quot;wigCode&quot;:&quot;SELF&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:true,&quot;dependent&quot;:false},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680560&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:22,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:11,&quot;contribution&quot;:11,&quot;combinedContribution&quot;:166.5,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680566&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:22,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:9.68,&quot;contribution&quot;:12.32,&quot;combinedContribution&quot;:146.52,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680572&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:0,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680563&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:262,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:131,&quot;contribution&quot;:131,&quot;combinedContribution&quot;:221,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680569&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Convantary Basic Life H4&quot;,&quot;planCode&quot;:&quot;80010${state}0089999&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;97a2ad05-ac76-405e-8204-2765c8b1fd53&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0.12,&quot;coverageAmount&quot;:1000,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:50000,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0.12,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:true,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:&quot;${Company Name}&quot;,&quot;dateHired&quot;:&quot;12/12/2014&quot;,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:true,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;BASICLIFE&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Gaurav Upadhyay&quot;}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/employeeInfo/?_dp=1434372054873&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutSpouseInfo/page/spouseInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372056605</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutSpouseInfo/page/spouseInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutSpouseInfo/page/spouseInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372057775</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutSpouseInfo/page/spouseInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId1</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Spouse Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutSpouseInfo/page/spouseInfo/?_dp=1434372085351&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId1} ,&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember3}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:24,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Anshika&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Bharadwaj&quot;,&quot;ssn&quot;:&quot;${ssnspa}&quot;,&quot;dob&quot;:&quot;12/22/1990&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:true,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Female&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId1},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId1},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SPOUSE&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;id&quot;:2,&quot;wigCode&quot;:&quot;SPOUSE&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:true,&quot;self&quot;:false,&quot;dependent&quot;:false},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680506&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:311,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:155.5,&quot;contribution&quot;:155.5,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680499&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680496&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:180,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:90,&quot;contribution&quot;:90,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680509&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:311,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:136.84,&quot;contribution&quot;:174.16,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier1}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Anshika Bharadwaj&quot;}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:&quot;Gaurav&quot;,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutSpouseInfo/page/spouseInfo/?_dp=1434372085351&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutDependentInfo/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372086706</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutDependentInfo/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutDependentInfo/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372087858</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutDependentInfo/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId2</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId3</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Dependent Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutDependentInfo/page/dependentInfo/?_dp=1434372132653&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId2},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember2}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:1,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Sharma&quot;,&quot;dob&quot;:&quot;01/10/2014&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Female&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId2},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId2},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680517&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680523&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680530&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680520&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier2}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Akanchha Sharma&quot;,&quot;open&quot;:true},{&quot;applicantId&quot;:${applicantId3},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember1}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:4,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Akshat&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Kumar&quot;,&quot;dob&quot;:&quot;01/10/2011&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Male&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId3},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId3},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:false,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680548&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680541&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680538&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680551&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier3}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Akshat Kumar&quot;,&quot;open&quot;:false}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:&quot;Gaurav&quot;,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutDependentInfo/page/dependentInfo/?_dp=1434372132653&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372134318</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372135288</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Care Physician Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372163834&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;pcpInfoList&quot;:[{&quot;applicantName&quot;:&quot;Gaurav&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;pcpName&quot;:&quot;nxcfvjkxsdjk&quot;,&quot;pcpIdentifier&quot;:&quot;jsvgfshdgfsgf&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Anshika&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;pcpName&quot;:&quot;nxcfvjkxsdjk&quot;,&quot;pcpIdentifier&quot;:&quot;jsvgfshdgfsgf&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akanchha&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;fhdsdssdhfh&quot;,&quot;pcpIdentifier&quot;:&quot;hjgfsdgfudd&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akshat&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;fhdsdssdhfh&quot;,&quot;pcpIdentifier&quot;:&quot;hjgfsdgfudd&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true,&quot;isDisabled&quot;:true}],&quot;isSpouseHasSamePcp&quot;:true,&quot;isDependentHasSamePcp&quot;:true,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372163834&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372164746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372165661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dentist Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372184140&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;pcpInfoList&quot;:[{&quot;applicantName&quot;:&quot;Gaurav&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;pcpName&quot;:&quot;xnhcuidfe&quot;,&quot;pcpIdentifier&quot;:&quot;vfsdgysdd&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Anshika&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;pcpName&quot;:&quot;xnhcuidfe&quot;,&quot;pcpIdentifier&quot;:&quot;vfsdgysdd&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akanchha&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;djfhsgsdhfji&quot;,&quot;pcpIdentifier&quot;:&quot;hgvsgdfe&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akshat&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;djfhsgsdhfji&quot;,&quot;pcpIdentifier&quot;:&quot;hgvsgdfe&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true}],&quot;isSpouseHasSamePcp&quot;:true,&quot;isDependentHasSamePcp&quot;:true,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372184140&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/otherInsurancesPolicies/page/questions/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372185001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/otherInsurancesPolicies/page/questions/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/otherInsurancesPolicies/page/questions/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372185900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/otherInsurancesPolicies/page/questions/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdDep1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">id2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">id3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="If you have any other insurance policies, please provide that information below" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/otherInsurancesPolicies/page/questions/?_dp=1434372215535&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[{&quot;questionId&quot;:&quot;Already_A_Dependent_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;},{&quot;questionId&quot;:&quot;Covered_IN_MEDICARE_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;},{&quot;questionId&quot;:&quot;COVERED_IN_TRICARE_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;}],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[{&quot;id&quot;:${id1},&quot;questionIdentifier&quot;:&quot;Already_A_Dependent_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:10,&quot;label&quot;:&quot;label.already.dependent.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Are you covered as a dependent on someone else&apos;s policy?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false},{&quot;id&quot;:${id2},&quot;questionIdentifier&quot;:&quot;Covered_IN_MEDICARE_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:20,&quot;label&quot;:&quot;label.covered.in.medicare.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Do you currently receive benefits from Medicare or Medicaid?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false},{&quot;id&quot;:${id3},&quot;questionIdentifier&quot;:&quot;COVERED_IN_TRICARE_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:30,&quot;label&quot;:&quot;label.covered.in.tricare.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Do you currently receive benefits from TRICARE or the Veterans Benefits Administration?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false}]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/otherInsurancesPolicies/page/questions/?_dp=1434372215535&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/beneficiaryInfo/page/beneficiaryInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372216653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/beneficiaryInfo/page/beneficiaryInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/beneficiaryInfo/page/beneficiaryInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372218909</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/beneficiaryInfo/page/beneficiaryInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Life Basic Life Beneficiary Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/beneficiaryInfo/page/beneficiaryInfo/?_dp=1434372250391&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:[],&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/beneficiaryInfo/page/beneficiaryInfo/?_dp=1434372250391&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutAcknowledgement/page/acknowledgement/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372251199</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutAcknowledgement/page/acknowledgement/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutAcknowledgement/page/acknowledgement/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372252081</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutAcknowledgement/page/acknowledgement/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submitt Enrolment" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutAcknowledgement/page/acknowledgement/?_dp=1434372270794&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:[{&quot;productCategories&quot;:[&quot;medical&quot;,&quot;vision&quot;,&quot;BASICLIFE&quot;,&quot;dental&quot;],&quot;issuerMarketingName&quot;:&quot;BlueSky&quot;,&quot;issuerCode&quot;:&quot;11111&quot;},{&quot;productCategories&quot;:[&quot;commuter&quot;],&quot;issuerMarketingName&quot;:&quot;Wageworks&quot;,&quot;issuerCode&quot;:&quot;99012&quot;}],&quot;acknowledgementDTOs&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;lastName&quot;:&quot;Upadhyay&quot;,&quot;memeberId&quot;:&quot;${empcode}&quot;,&quot;name&quot;:&quot;Gaurav Upadhyay&quot;,&quot;signDate&quot;:null,&quot;relationship&quot;:{&quot;name&quot;:&quot;SELF&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;id&quot;:1,&quot;wigCode&quot;:&quot;SELF&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:true,&quot;dependent&quot;:false,&quot;relationshipName&quot;:&quot;Primary-Applicant&quot;}}],&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutAcknowledgement/page/acknowledgement/?_dp=1434372270794&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkoutsummary/{identifier}/view/section/checkoutSummary/page/checkoutSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372272205</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkoutsummary/${identifier}/view/section/checkoutSummary/page/checkoutSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkoutsummary/{identifier}/section/checkoutSummary/page/checkoutSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372273997</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkoutsummary/${identifier}/section/checkoutSummary/page/checkoutSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Your information has been submitted to the appropriate insurance and other benefit companies." enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/enrollmentBenefitSummary/view/section/checkOut/page/enrollmentBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372284756</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/enrollmentBenefitSummary/view/section/checkOut/page/enrollmentBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/enrollmentBenefitSummary/section/checkOut/page/enrollmentBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372286327</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/enrollmentBenefitSummary/section/checkOut/page/enrollmentBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="logout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/employee/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - Stepping Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="Threads initial delay">1</stringProp>
        <stringProp name="Start users count">1</stringProp>
        <stringProp name="Start users count burst">1</stringProp>
        <stringProp name="Start users period">2</stringProp>
        <stringProp name="Stop users count">2</stringProp>
        <stringProp name="Stop users period">1</stringProp>
        <stringProp name="flighttime">1800</stringProp>
        <stringProp name="rampUp">5</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list"/>
        </AuthManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">port</stringProp>
              <stringProp name="Header.value">8080</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">employee.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">data_cre_userId,empcode,tokenIdentifier</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="trf" elementType="Argument">
              <stringProp name="Argument.name">trf</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="exchange" elementType="Argument">
              <stringProp name="Argument.name">exchange</stringProp>
              <stringProp name="Argument.value">ex3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">ex-perf41.demo.hcinternal.net</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">PA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="zip" elementType="Argument">
              <stringProp name="Argument.name">zip</stringProp>
              <stringProp name="Argument.value">15619</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="county" elementType="Argument">
              <stringProp name="Argument.name">county</stringProp>
              <stringProp name="Argument.value">WESTMORELAND</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">Qwerty12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="StateLicenseNo" elementType="Argument">
              <stringProp name="Argument.name">StateLicenseNo</stringProp>
              <stringProp name="Argument.value">99999999</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Company Name" elementType="Argument">
              <stringProp name="Argument.name">Company Name</stringProp>
              <stringProp name="Argument.value">mycompany</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="city" elementType="Argument">
              <stringProp name="Argument.name">city</stringProp>
              <stringProp name="Argument.value">mycity</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address" elementType="Argument">
              <stringProp name="Argument.name">address</stringProp>
              <stringProp name="Argument.value">myadd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SIC" elementType="Argument">
              <stringProp name="Argument.name">SIC</stringProp>
              <stringProp name="Argument.value">MEDICAL AND HOSPITAL EQUIPMENT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="data_cre_userId_test" elementType="Argument">
              <stringProp name="Argument.name">data_cre_userId_test</stringProp>
              <stringProp name="Argument.value">c1773a51-448e-48e6-82dd-2cd6d8834173</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="empcode_test" elementType="Argument">
              <stringProp name="Argument.name">empcode_test</stringProp>
              <stringProp name="Argument.value">6752fcb0-df98-425b-94aa-3e781e318e31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tokenIdentifier_test" elementType="Argument">
              <stringProp name="Argument.name">tokenIdentifier_test</stringProp>
              <stringProp name="Argument.value">e750b42d-9b48-4459-9c1a-b327786e80a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="email_test" elementType="Argument">
              <stringProp name="Argument.name">email_test</stringProp>
              <stringProp name="Argument.value">kgghurt@gus.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="fname_test" elementType="Argument">
              <stringProp name="Argument.name">fname_test</stringProp>
              <stringProp name="Argument.value">lelggdi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="timer" elementType="Argument">
              <stringProp name="Argument.name">timer</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">500</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">userId</stringProp>
          <stringProp name="CounterConfig.format">1</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="BSF Sampler-readIndividualFile" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;fname&quot;,&quot;${__RandomString(5,asdfghjklqwertyuiopzxcvbnm,)}&quot;);
vars.put(&quot;lname&quot;,&quot;${__RandomString(3,asdfghjklqwertyuiopzxcvbnm,)}&quot;);
String fname = vars.get(&quot;fname&quot;);
String lname = vars.get(&quot;lname&quot;);


String email = fname+lname+&quot;@&quot;+lname+&quot;.com&quot;;
vars.put(&quot;email&quot;,email);

//System.out.println(&quot;test value:&quot;+email);

//vars.put(&quot;email&quot;,fname+lname+&quot;@&quot;+&quot;${__threadNum()}_${__time(YMD)}${__time(HMSs)}.com&quot;);
//vars.put(&quot;ssnspa&quot;,&quot;${__Random(100000001,999999999,)}&quot;);
vars.put(&quot;ssn0&quot;,&quot;${__Random(101,899,)}&quot;);
 String ssn0 = vars.get(&quot;ssn0&quot;);
 
 if (ssn0.equals(&quot;666&quot;))
 vars.put(&quot;ssn0&quot;,&quot;${__Random(101,665,)}&quot;); 
 
 
 vars.put(&quot;ssn1&quot;,&quot;${__Random(10,99,)}&quot;);
 vars.put(&quot;ssn2&quot;,&quot;${__Random(1001,9999,)}&quot;);
 
 ssn0 = vars.get(&quot;ssn0&quot;);
 String ssn1 = vars.get(&quot;ssn1&quot;);
 String ssn2 = vars.get(&quot;ssn2&quot;);
 String ssnspa = ssn0+ssn1+ssn2;
 vars.put(&quot;ssnspa&quot;,ssnspa);
System.out.println(ssn0+&quot;-&quot;+ssn1+&quot;-&quot;+ssn2+&quot;:&quot;+ssnspa);
 
String data = vars.get(&quot;data_cre_userId&quot;);
String emp = vars.get(&quot;empcode&quot;);
String token = vars.get(&quot;tokenIdentifier&quot;);
//System.out.println(&quot;MyVal value:&quot;+data+&quot;:&quot;+emp);


</stringProp>
          <stringProp name="scriptLanguage">beanshell</stringProp>
        </BSFSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Register" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/employee/register" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="registrationCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">registrationCode</stringProp>
                  <stringProp name="Argument.value">${data_cre_userId}%7C${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tokenIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tokenIdentifier</stringProp>
                  <stringProp name="Argument.value">${tokenIdentifier}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/employee/employee/register</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrfINIT" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrfINIT</stringProp>
              <stringProp name="RegexExtractor.regex">input type=&quot;hidden&quot; name=&quot;CSRFToken&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">csrfINIT NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/employee/register?registrationCode=${data_cre_userId}%7C${empcode}&amp;tokenIdentifier=${tokenIdentifier}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="employeeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">employeeId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isProspective" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isProspective</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userName</stringProp>
                  <stringProp name="Argument.value">${email}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirmPassword" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">confirmPassword</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].securityQuestion.id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].securityQuestion.id</stringProp>
                  <stringProp name="Argument.value">287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].securityAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].securityAnswer</stringProp>
                  <stringProp name="Argument.value">Kabuter</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[0].customSecurityQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[0].customSecurityQuestion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].securityQuestion.id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].securityQuestion.id</stringProp>
                  <stringProp name="Argument.value">286</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].securityAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].securityAnswer</stringProp>
                  <stringProp name="Argument.value">Marcgyu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="securityQuestionAnswers[1].customSecurityQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">securityQuestionAnswers[1].customSecurityQuestion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tokenIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tokenIdentifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="extClientIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">extClientIdentifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CSRFToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CSRFToken</stringProp>
                  <stringProp name="Argument.value">${csrfINIT}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/employee/register?registrationCode=${data_cre_userId}%7C${empcode}&amp;tokenIdentifier=${tokenIdentifier}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/employee/register?registrationCode=${data_cre_userId}|${empcode}&amp;tokenIdentifier=${tokenIdentifier}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrf" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrf</stringProp>
              <stringProp name="RegexExtractor.regex">GlobalVars\[&quot;CSRFToken&quot;\] = &quot;(.+?)&quot;;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">csrf NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371759859</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/information</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/view/section/introduction/page/benefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371760600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/view/section/introduction/page/benefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/section/introduction/page/benefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371761277</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/section/introduction/page/benefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Welcome to Fidelity Health Marketplace!" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/benefits/section/introduction/page/benefitSummary/?_dp=1434371785708&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;declineAllProductCategories&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/benefits/section/introduction/page/benefitSummary/?_dp=1434371785708&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/view/section/aboutYou/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371786626</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/view/section/aboutYou/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/section/aboutYou/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371787581</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/section/aboutYou/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="familyMember3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">familyMember3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;familyMemberIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">familyMember3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/template/hc-validation-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/template/hc-validation-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Do you have a spouse or domestic partner that you&apos;d like covered?" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/profile/section/aboutYou/page/dependentInfo/?_dp=1434371807483&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:true,&quot;coveredMembers&quot;:[],&quot;gender&quot;:null,&quot;dateOfBirth&quot;:null,&quot;smoker&quot;:null,&quot;hasSpouse&quot;:true,&quot;hasDependents&quot;:true,&quot;name&quot;:null,&quot;address&quot;:null,&quot;employeeFamilyMembers&quot;:[{&quot;name&quot;:{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Bharadwaj&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;12/22/1990&quot;,&quot;smoker&quot;:true,&quot;familyMemberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SPOUSE&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;id&quot;:2,&quot;wigCode&quot;:&quot;SPOUSE&quot;,&quot;dsiplayName&quot;:&quot;Spouse&quot;,&quot;spouse&quot;:true,&quot;self&quot;:false,&quot;dependent&quot;:false},&quot;isSmoker&quot;:true},{&quot;name&quot;:{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Kumar&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;01/10/2011&quot;,&quot;smoker&quot;:false,&quot;familyMemberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:&quot;Child&quot;,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;isSmoker&quot;:false},{&quot;name&quot;:{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Sharma&quot;,&quot;nameSuffix&quot;:null},&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;01/10/2014&quot;,&quot;smoker&quot;:true,&quot;familyMemberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:&quot;Child&quot;,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;isSmoker&quot;:true}],&quot;responseSummary&quot;:null,&quot;isSmoker&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/profile/section/aboutYou/page/dependentInfo/?_dp=1434371807483&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/view/section/aboutYou/page/choosePath/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371808249</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/view/section/aboutYou/page/choosePath/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/section/aboutYou/page/choosePath/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371808895</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/section/aboutYou/page/choosePath/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Let&apos;s get started with your plan selection. What would you like to do" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/choosePath/section/aboutYou/page/choosePath/?_dp=1434371820404&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isDSSFlow&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/choosePath/section/aboutYou/page/choosePath/?_dp=1434371820404&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/view/section/medicalPlan/page/plans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371821197</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/view/section/medicalPlan/page/plans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/section/medicalPlan/page/plans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371822177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/section/medicalPlan/page/plans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" We&apos;ve found the following plans for you_med" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371837805</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/section/medicalPlan/page/plans/?_dp=1434371837805&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Marketplace Extra 3&quot;,&quot;amount&quot;:&quot;51.00&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:false,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:&quot;Silver&quot;,&quot;individualDeductible&quot;:&quot;NA&quot;,&quot;familyDeductible&quot;:&quot;NA&quot;,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://www.dol.gov/ebsa/pdf/correctedsamplecompletedsbc2.pdf&quot;,&quot;benefitCoverageLink&quot;:&quot;${trf}://www.dol.gov/ebsa/pdf/CorrectedSampleCompletedSBC2.pdf&quot;,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;outOfPocketMaximumValue&quot;:&quot;NA&quot;,&quot;deductible&quot;:&quot;NA&quot;,&quot;prescriptionDrugsCoveredLink&quot;:null,&quot;primaryPhysicianOfficeVisit&quot;:&quot;NA&quot;,&quot;specialistVisit&quot;:&quot;NA&quot;,&quot;erVisit&quot;:&quot;NA&quot;,&quot;urgentCareFacility&quot;:&quot;NA&quot;,&quot;hospitalInPatient&quot;:&quot;NA&quot;,&quot;hospitalOutPatient&quot;:&quot;NA&quot;,&quot;genericPrescription&quot;:&quot;NA&quot;,&quot;brandNamePrescription&quot;:&quot;NA&quot;},&quot;primaryPhysicianOfficeVisit&quot;:&quot;NA&quot;,&quot;isRestrictedDoctorNetwork&quot;:true,&quot;isReferralsNeeded&quot;:false,&quot;isAllowForFamilyDeductible&quot;:true,&quot;taxSavingLabel&quot;:&quot;noAdditionalTaxSaving&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/section/medicalPlan/page/plans/?_dp=1434371837805&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/view/section/taxSavings/page/hsaPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371839815</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/view/section/taxSavings/page/hsaPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/medical/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371839818</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/medical/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371841560</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" How much would you like to invest each year? " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/?_dp=1434371854092&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Health Savings Account&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;99999&quot;,&quot;productCategory&quot;:&quot;HSA&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;8f354fbd-72f3-4716-8a54-a3bcf5399ba5&quot;,&quot;planCode&quot;:&quot;99999HSA&quot;,&quot;issuerCode&quot;:&quot;99011&quot;,&quot;carrierName&quot;:&quot;99999&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:false,&quot;employeeContribution&quot;:&quot;-49&quot;,&quot;employerContribution&quot;:&quot;54&quot;,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;totalMaximumContribution&quot;:&quot;5&quot;,&quot;taxSavingEstimationFactor&quot;:&quot;27.00&quot;,&quot;deductable&quot;:&quot;0&quot;,&quot;payPerPeriodFactor&quot;:&quot;0.23076923076923078&quot;,&quot;annualMinimumLimit&quot;:&quot;0&quot;,&quot;annualMaximumLimit&quot;:&quot;-49&quot;,&quot;planDetail&quot;:{&quot;reimbursement&quot;:&quot;Debit Card&quot;,&quot;runOutPeriod&quot;:null,&quot;fdicInsured&quot;:&quot;Yes or No&quot;,&quot;investmentOptions&quot;:&quot;Consumer can invest account balances over $2,000 in Mutual Funds&quot;,&quot;rollOverAmount&quot;:&quot;&quot;,&quot;gracePeriod&quot;:&quot;NA&quot;,&quot;rollOverOrGracePeriod&quot;:null,&quot;guideLink&quot;:null,&quot;brochureLink&quot;:null,&quot;disclaimer&quot;:&quot;The Bank details page is a summary for informational purposes only. The information in the summary has been provided by the HSA administrators identified above. Because this information changes frequently, check with the relevant HSA administrator to confirm its accuracy. You should also review your chosen HSA administrator&apos;s enrollment documents for a more detailed description of current requirements, fees and investment options. Only the terms and conditions listed in your enrollment documents are binding.&quot;}}],&quot;employeePlanFlow&quot;:[{&quot;pageLabel&quot;:&quot;Health Savings Account&quot;,&quot;isBlocked&quot;:true,&quot;isSelected&quot;:true,&quot;isDefault&quot;:null,&quot;planCount&quot;:null,&quot;helpText&quot;:&quot;You can contribute pre-tax dollars to a Health Savings Account to pay for qualified expenses. This money is yours and rolls over from year to year.To choose an HSA, you must have a qualified High Deductible Health Plan. You should know that you cannot choose an FSA if you choose an HSA, but you can choose a LPFSA.&quot;,&quot;productCategory&quot;:&quot;HSA&quot;}],&quot;waivedProductCategoryName&quot;:null,&quot;isWaivedCoverage&quot;:false,&quot;blockedTextLabel&quot;:&quot;label.employee.taxSaving.HSA.blocked&quot;,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/taxSaving/section/taxSavings/page/hsaPlans/?_dp=1434371854092&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/dentalPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371854892</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/dentalPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371856351</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | dent" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/?_dp=1434371868945&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;amount&quot;:&quot;38.42&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;individualDeductible&quot;:&quot;$4.00&quot;,&quot;familyDeductible&quot;:&quot;$33.00&quot;,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://yyy.ttt.com&quot;,&quot;benefitCoverageLink&quot;:&quot;yyy.ttt.com&quot;,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;orthodontiaMax&quot;:&quot;NA&quot;,&quot;routineDentalCare&quot;:&quot;NA&quot;,&quot;basicDentalCare&quot;:&quot;NA&quot;,&quot;majorDentalCare&quot;:&quot;NA&quot;,&quot;orthodontia&quot;:&quot;NA&quot;},&quot;annualBenefitMaximum&quot;:&quot;$777.00&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/dentalPlanListing/?_dp=1434371868945&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371868945</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/visionPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371869777</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/visionPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/dental/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371869781</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/dental/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371871003</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Vision" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/?_dp=1434371883340&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Vision Plan New Labels&quot;,&quot;amount&quot;:&quot;33.81&quot;,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;individualDeductible&quot;:null,&quot;familyDeductible&quot;:null,&quot;healthPlanDetailsDTO&quot;:{&quot;healthPlanBrochureLink&quot;:&quot;${trf}://yyy.ttt.com&quot;,&quot;benefitCoverageLink&quot;:null,&quot;doctorInNetworkProviderUrl&quot;:&quot;&quot;,&quot;polycarbonateLenses&quot;:&quot;6&quot;,&quot;antiReflectiveLenses&quot;:&quot;NA&quot;,&quot;scratchCoatingLenses&quot;:&quot;8&quot;,&quot;standardProgressiveLenses&quot;:&quot;9&quot;,&quot;lasikCareProgram&quot;:&quot;5&quot;},&quot;visionExamination&quot;:&quot;7&quot;,&quot;opticalLenses&quot;:&quot;3&quot;,&quot;contactLenses&quot;:&quot;4&quot;,&quot;frames&quot;:&quot;7&quot;}],&quot;coveredMembers&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Anshika&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akshat&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;selected&quot;:true},{&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/visionPlanListing/?_dp=1434371883340&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/lifePlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371884109</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/lifePlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371883340</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/planList/product/vision/search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${familyMember3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">${empcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isDss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isDss</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371884114</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/planList/product/vision/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371885032</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Life_Anci" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/?_dp=1434371919174&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;Convantary Basic Life H4&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;BLUE_SKY&quot;,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;97a2ad05-ac76-405e-8204-2765c8b1fd53&quot;,&quot;planCode&quot;:&quot;80010${state}0089999&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;carrierName&quot;:&quot;BLUE_SKY&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:null,&quot;employeeParkingContribution&quot;:null,&quot;levelOfCoverage&quot;:null,&quot;planBrochureUrl&quot;:&quot;www.bluesky.com/planbrochures.pdf&quot;,&quot;employerName&quot;:&quot;${Company Name}&quot;,&quot;coverageReductionApplied&quot;:false,&quot;coveragePremiumInfoMap&quot;:{&quot;SELF&quot;:[{&quot;coverageOption&quot;:null,&quot;coverageAmount&quot;:1000,&quot;premium&quot;:0,&quot;coverageAmountGreaterThanGuaranteedAmount&quot;:false,&quot;correspondingBasicPlanCoverageAmount&quot;:0}]}}],&quot;employeePlanFlow&quot;:[{&quot;pageLabel&quot;:&quot;Dental&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;},{&quot;pageLabel&quot;:&quot;Vision&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;},{&quot;pageLabel&quot;:&quot;Life&quot;,&quot;isBlocked&quot;:false,&quot;isSelected&quot;:true,&quot;isDefault&quot;:true,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;},{&quot;pageLabel&quot;:&quot;Commuter&quot;,&quot;isBlocked&quot;:null,&quot;isSelected&quot;:false,&quot;isDefault&quot;:null,&quot;planCount&quot;:1,&quot;helpText&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;}],&quot;waivedProductCategoryName&quot;:null,&quot;isWaivedCoverage&quot;:false,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/lifePlans/?_dp=1434371919174&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/commuterPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371920872</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/view/section/additionalBenefits/page/commuterPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371921672</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="The following coverage is available to you | Commuter" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/?_dp=1434371937368&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;employeePlans&quot;:[{&quot;name&quot;:&quot;TransitCheck Premium&quot;,&quot;amount&quot;:null,&quot;carrierCode&quot;:&quot;99998&quot;,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planType&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;carrierName&quot;:&quot;99998&quot;,&quot;csrLevel&quot;:null,&quot;isPlanSelected&quot;:true,&quot;employeeContribution&quot;:null,&quot;employerContribution&quot;:null,&quot;outOfPocketCalculated&quot;:null,&quot;worstCaseCost&quot;:null,&quot;familyCostOfEmployee&quot;:null,&quot;planWeight&quot;:null,&quot;isHSAEligible&quot;:null,&quot;dssPlanRank&quot;:0,&quot;ancillarySelfCoverageOption&quot;:null,&quot;ancillarySpouseCoverageOption&quot;:null,&quot;ancillaryDependentCoverageOption&quot;:null,&quot;memberIdentifierList&quot;:null,&quot;employeeTransitContribution&quot;:&quot;0&quot;,&quot;employeeParkingContribution&quot;:&quot;0&quot;,&quot;levelOfCoverage&quot;:null,&quot;preTaxTransitLimit&quot;:&quot;130&quot;,&quot;preTaxParkingLimit&quot;:&quot;250&quot;,&quot;employerTransitContribution&quot;:&quot;56&quot;,&quot;employerParkingContribution&quot;:&quot;54&quot;,&quot;payPerPeriodFactor&quot;:&quot;0.23076923076923078&quot;}],&quot;coveredMembers&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/additionalBenefit/section/additionalBenefits/page/commuterPlans/?_dp=1434371937368&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/view/section/checkOut/page/reviewBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371938107</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/view/section/checkOut/page/reviewBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371937368</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/returningUserFlow/section/checkOut/page/cartDetails/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371938941</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OK, great. Here&apos;s everything you selected" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/?_dp=1434371973745&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;productCategoryBenefits&quot;:[{&quot;productCategory&quot;:&quot;medical&quot;,&quot;productCategoryDisplayName&quot;:&quot;Medical&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;productCategory&quot;:&quot;medical&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:&quot;POS&quot;},&quot;employeeContribution&quot;:&quot;51.00&quot;,&quot;employerContribution&quot;:&quot;51.00&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;51.00&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;51.00&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;HSA&quot;,&quot;productCategoryDisplayName&quot;:&quot;HSA&quot;,&quot;selectedPlans&quot;:null,&quot;offeredPlans&quot;:{&quot;issuerName&quot;:&quot;Discovery Benefits&quot;,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Health Savings Account&quot;,&quot;productCategory&quot;:null,&quot;additionalAttributes&quot;:{&quot;Annual Contribution&quot;:&quot;$0&quot;},&quot;employeeContribution&quot;:&quot;NA&quot;,&quot;employerContribution&quot;:&quot;--&quot;,&quot;enrolledMembers&quot;:[]}]},&quot;categoryWiseEmployeeContribution&quot;:&quot;NA&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;--&quot;,&quot;showDeclinePlan&quot;:false,&quot;showChangePlan&quot;:false,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;dental&quot;,&quot;productCategoryDisplayName&quot;:&quot;Dental&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;productCategory&quot;:&quot;dental&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:&quot;HMO&quot;},&quot;employeeContribution&quot;:&quot;38.42&quot;,&quot;employerContribution&quot;:&quot;38.42&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;38.42&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;38.42&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;vision&quot;,&quot;productCategoryDisplayName&quot;:&quot;Vision&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;productCategory&quot;:&quot;vision&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:null},&quot;employeeContribution&quot;:&quot;33.81&quot;,&quot;employerContribution&quot;:&quot;43.03&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;33.81&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;43.03&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;productCategoryDisplayName&quot;:&quot;Life&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;Convantary Basic Life H4&quot;,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;additionalAttributes&quot;:{&quot;Amount&quot;:&quot;$1,000.00&quot;},&quot;employeeContribution&quot;:&quot;0&quot;,&quot;employerContribution&quot;:&quot;0.12&quot;,&quot;enrolledMembers&quot;:[]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;0.00&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;.12&quot;,&quot;showDeclinePlan&quot;:false,&quot;showChangePlan&quot;:false,&quot;showSelectPlan&quot;:false},{&quot;productCategory&quot;:&quot;commuter&quot;,&quot;productCategoryDisplayName&quot;:&quot;Commuter&quot;,&quot;selectedPlans&quot;:{&quot;issuerName&quot;:null,&quot;plans&quot;:[{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;additionalAttributes&quot;:{&quot;Type&quot;:null},&quot;employeeContribution&quot;:&quot;0.0&quot;,&quot;employerContribution&quot;:&quot;110.00&quot;,&quot;enrolledMembers&quot;:[&quot;Gaurav&quot;,&quot;Anshika&quot;,&quot;Akshat&quot;,&quot;Akanchha&quot;]}]},&quot;offeredPlans&quot;:null,&quot;categoryWiseEmployeeContribution&quot;:&quot;0.0&quot;,&quot;categoryWiseEmployerContribution&quot;:&quot;110.00&quot;,&quot;showDeclinePlan&quot;:true,&quot;showChangePlan&quot;:true,&quot;showSelectPlan&quot;:false}],&quot;totalEmployeeContribution&quot;:&quot;123.23&quot;,&quot;totalEmployerContribution&quot;:&quot;242.57&quot;,&quot;checkoutEnabled&quot;:true,&quot;showSkip&quot;:false,&quot;showBack&quot;:false,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/reviewBenefitSummary/section/checkOut/page/reviewBenefitSummary/?_dp=1434371973745&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identifier</stringProp>
              <stringProp name="RegexExtractor.regex">workflow/checkout/(.+?)&quot;,&quot;allSections</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identifier NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutEmployeeInfo/page/checkout/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371977904</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutEmployeeInfo/page/checkout/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/checkout/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371978790</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/checkout/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Countinue" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/checkout/?_dp=1434371994043&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/checkout/?_dp=1434371994043&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutEmployeeInfo/page/employeeInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371994976</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutEmployeeInfo/page/employeeInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/template/hc-ssn" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/template/hc-ssn</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/information" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/information</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/employeeInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/employeeInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssnq" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ssnq</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ssn&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ssnq NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/configurations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371996177</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/configurations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/web/utility/validateZipCode/${zip}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434371998971</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/web/utility/validateZipCode/${zip}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutEmployeeInfo/page/employeeInfo/?_dp=1434372054873&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:&quot;Sr&quot;,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${empcode}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:25,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Upadhyay&quot;,&quot;ssn&quot;:&quot;${ssnq}&quot;,&quot;dob&quot;:&quot;02/24/1990&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Male&quot;,&quot;userNotificationPreference&quot;:&quot;Mail&quot;,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;PRIMARY&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SELF&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;id&quot;:1,&quot;wigCode&quot;:&quot;SELF&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:true,&quot;dependent&quot;:false},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680560&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:22,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:11,&quot;contribution&quot;:11,&quot;combinedContribution&quot;:166.5,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680566&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:22,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:9.68,&quot;contribution&quot;:12.32,&quot;combinedContribution&quot;:146.52,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680572&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:0,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680563&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:262,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:131,&quot;contribution&quot;:131,&quot;combinedContribution&quot;:221,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680569&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Convantary Basic Life H4&quot;,&quot;planCode&quot;:&quot;80010${state}0089999&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;97a2ad05-ac76-405e-8204-2765c8b1fd53&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0.12,&quot;coverageAmount&quot;:1000,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:50000,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0.12,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:true,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:&quot;${Company Name}&quot;,&quot;dateHired&quot;:&quot;12/12/2014&quot;,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:true,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;BASICLIFE&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Gaurav Upadhyay&quot;}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutEmployeeInfo/page/employeeInfo/?_dp=1434372054873&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutSpouseInfo/page/spouseInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372056605</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutSpouseInfo/page/spouseInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutSpouseInfo/page/spouseInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372057775</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutSpouseInfo/page/spouseInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId1</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Spouse Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutSpouseInfo/page/spouseInfo/?_dp=1434372085351&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId1} ,&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember3}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:24,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Anshika&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Bharadwaj&quot;,&quot;ssn&quot;:&quot;${ssnspa}&quot;,&quot;dob&quot;:&quot;12/22/1990&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:true,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Female&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId1},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId1},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;SPOUSE&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;id&quot;:2,&quot;wigCode&quot;:&quot;SPOUSE&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:true,&quot;self&quot;:false,&quot;dependent&quot;:false},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680506&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:311,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:155.5,&quot;contribution&quot;:155.5,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680499&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680496&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:180,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:90,&quot;contribution&quot;:90,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680509&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:311,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:136.84,&quot;contribution&quot;:174.16,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier1}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Anshika Bharadwaj&quot;}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:&quot;Gaurav&quot;,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutSpouseInfo/page/spouseInfo/?_dp=1434372085351&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutDependentInfo/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372086706</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutDependentInfo/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutDependentInfo/page/dependentInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372087858</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutDependentInfo/page/dependentInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId2</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantIdentifier3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantIdentifier3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicantIdentifier&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdentifier3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:(.+?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="contactId3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contactId3</stringProp>
              <stringProp name="RegexExtractor.regex">contactId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">contactId3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Your Dependent Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutDependentInfo/page/dependentInfo/?_dp=1434372132653&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:[{&quot;applicantId&quot;:${applicantId2},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember2}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:1,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Akanchha&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Sharma&quot;,&quot;dob&quot;:&quot;01/10/2014&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Female&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId2},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId2},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:true,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680517&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680523&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680530&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680520&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier2}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Akanchha Sharma&quot;,&quot;open&quot;:true},{&quot;applicantId&quot;:${applicantId3},&quot;externalIdentifer&quot;:null,&quot;prefix&quot;:null,&quot;suffix&quot;:null,&quot;isLscDirty&quot;:null,&quot;memberId&quot;:&quot;${familyMember1}&quot;,&quot;pcpId&quot;:null,&quot;age&quot;:4,&quot;ageFromEffectiveDate&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;firstName&quot;:&quot;Akshat&quot;,&quot;middleName&quot;:null,&quot;lastName&quot;:&quot;Kumar&quot;,&quot;dob&quot;:&quot;01/10/2011&quot;,&quot;primaryApplicantId&quot;:null,&quot;heightDTO&quot;:{&quot;feet&quot;:null,&quot;inch&quot;:null},&quot;weight&quot;:null,&quot;disabled&quot;:false,&quot;citizenshipStatus&quot;:null,&quot;annualWage&quot;:null,&quot;appliedSubsidy&quot;:0,&quot;gender&quot;:&quot;Male&quot;,&quot;userNotificationPreference&quot;:null,&quot;specialDependent&quot;:false,&quot;contactDTO&quot;:{&quot;contactId&quot;:${contactId3},&quot;rightTimeToCall&quot;:null,&quot;isMailingAddressSame&quot;:true,&quot;addressListDTO&quot;:{&quot;addressDTO&quot;:[{&quot;addressId&quot;:${addressId3},&quot;addressType&quot;:&quot;PRIMARY_ADDRESS&quot;,&quot;addressLine1&quot;:&quot;Street No. 1&quot;,&quot;addressLine2&quot;:null,&quot;state&quot;:&quot;${state}&quot;,&quot;city&quot;:&quot;NY&quot;,&quot;county&quot;:&quot;${county}&quot;,&quot;isLscDirty&quot;:null,&quot;lscStatus&quot;:null,&quot;zip&quot;:&quot;${zip}&quot;,&quot;phone&quot;:null,&quot;area&quot;:null}]},&quot;phoneNumbersListDTO&quot;:{&quot;phoneNumber&quot;:[{&quot;phoneNumberType&quot;:&quot;Work&quot;,&quot;phoneNumber&quot;:&quot;9582854221&quot;}]},&quot;emailListDTO&quot;:{&quot;emailDTO&quot;:[{&quot;emailType&quot;:&quot;PRIMARY&quot;,&quot;emailAddress&quot;:&quot;gaurav@hcentive.com&quot;}]},&quot;preferredLanguageListDTO&quot;:null,&quot;socialNetworkListDTO&quot;:null,&quot;fax&quot;:null,&quot;pager&quot;:null},&quot;isTobaccoUser&quot;:false,&quot;isAmericanIndian&quot;:false,&quot;isStudent&quot;:false,&quot;isPregnant&quot;:false,&quot;applicantTypeName&quot;:&quot;DEPENDENT&quot;,&quot;maritalStatusType&quot;:null,&quot;relationshipDTO&quot;:{&quot;name&quot;:&quot;CHILD&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;id&quot;:3,&quot;wigCode&quot;:&quot;CHILD&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:false,&quot;dependent&quot;:true},&quot;coveragePlanListDTO&quot;:{&quot;coveragePlanDTO&quot;:[{&quot;coveragePlanId&quot;:&quot;85680548&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;vision&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Vision Plan New Labels&quot;,&quot;planCode&quot;:&quot;77123${state}0000786&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;911e6787-a91c-49fa-8a4c-6e552cf777cb&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680541&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;commuter&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;TransitCheck Premium&quot;,&quot;planCode&quot;:&quot;CommBen11&quot;,&quot;issuerCode&quot;:&quot;99012&quot;,&quot;issuerName&quot;:&quot;Wageworks&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:null,&quot;networkCode&quot;:null,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;a1cc58a2-86cc-4ef8-9d9b-f8a19ccdc5b1&quot;,&quot;carrier&quot;:&quot;99998&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:null},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[{&quot;key&quot;:&quot;EMPLOYEE_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_${state}RKING_CONTRIBUTION&quot;,&quot;value&quot;:&quot;54.0&quot;},{&quot;key&quot;:&quot;EMPLOYEE_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;0.0&quot;},{&quot;key&quot;:&quot;EMPLOYER_TRANSIT_CONTRIBUTION&quot;,&quot;value&quot;:&quot;56.0&quot;}],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680538&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Marketplace Extra 3&quot;,&quot;planCode&quot;:&quot;11111${state}0002163&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;01/01/2015&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;hsaEligible&quot;:false,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;ca0e5238-fb71-47d6-8e01-fef70248fbc51163&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0},{&quot;coveragePlanId&quot;:&quot;85680551&quot;,&quot;coveragePlanName&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;planDTO&quot;:{&quot;planName&quot;:&quot;Guardian Pediatric Advantage&quot;,&quot;planCode&quot;:&quot;22444${state}0026698&quot;,&quot;issuerCode&quot;:&quot;11111&quot;,&quot;issuerName&quot;:&quot;BlueSky&quot;,&quot;effectiveDate&quot;:&quot;11/11/2014&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;hsaEligible&quot;:null,&quot;hraEligible&quot;:null,&quot;planIdentifier&quot;:&quot;9d3a64ac-8d1f-4ad2-b159-e9283c51eee2&quot;,&quot;carrier&quot;:&quot;BLUE_SKY&quot;,&quot;eliminationPeriod&quot;:null,&quot;eliminationPeriodFrame&quot;:null,&quot;disabilityBenefitPeriod&quot;:null,&quot;disabilityBenefitPeriodFrame&quot;:null,&quot;refPlanFlag&quot;:false,&quot;flexBenefitEOContribution&quot;:null,&quot;flexBenefitESContribution&quot;:null,&quot;flexBenefitEDContribution&quot;:null,&quot;flexBenefitEFContribution&quot;:null,&quot;ratingAreaCode&quot;:&quot;${state}006&quot;},&quot;evidenceOfInsurability&quot;:false,&quot;premium&quot;:0,&quot;coverageAmount&quot;:null,&quot;multiplesOfSalaryAmount&quot;:null,&quot;guaranteedAmount&quot;:null,&quot;applicantSharePremium&quot;:0,&quot;contribution&quot;:0,&quot;combinedContribution&quot;:null,&quot;contributionSettingId&quot;:null,&quot;coveragePlanRiderListDTO&quot;:null,&quot;applicantFee&quot;:0,&quot;applicantTax&quot;:0,&quot;planFee&quot;:0,&quot;planTax&quot;:0,&quot;isLscDirty&quot;:null,&quot;enrollmentPlanInfo&quot;:{&quot;insuranceType&quot;:null,&quot;effectiveDate&quot;:&quot;07/01/2015&quot;,&quot;endDate&quot;:null,&quot;enrollmentExternalIdentifier&quot;:null,&quot;externalMemberIdentifier&quot;:null,&quot;status&quot;:&quot;IN_PROGRESS&quot;,&quot;useCarrierEffectiveDate&quot;:false,&quot;reason&quot;:null},&quot;isAlternatePlan&quot;:null,&quot;originalPlanCode&quot;:null,&quot;questionnaireResponses&quot;:[],&quot;beneficiaryDetails&quot;:[],&quot;coveragePlanApplicantAttributes&quot;:[],&quot;isDeleteBeneficiary&quot;:false,&quot;deleted&quot;:false,&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;updatedThroughLSC&quot;:false,&quot;planDeleted&quot;:false,&quot;ancillaryPlan&quot;:false,&quot;deleteBeneficiary&quot;:false,&quot;totalRidersPremium&quot;:0}]},&quot;priorHealthCoverageDTOList&quot;:null,&quot;existingHealthPlanDTOList&quot;:null,&quot;acknowledgementSignatureDTO&quot;:null,&quot;enrollmentSignatureDTO&quot;:null,&quot;authorizationSignatureDTO&quot;:null,&quot;occupationDetailsDTO&quot;:{&quot;employerName&quot;:null,&quot;dateHired&quot;:null,&quot;jobTitle&quot;:null},&quot;extendedInfoListDTO&quot;:{&quot;extendedInfoDTOList&quot;:[]},&quot;questionnaireResponseDTO&quot;:null,&quot;expectedNumberOfBabies&quot;:null,&quot;lscStatus&quot;:null,&quot;isHandicapped&quot;:null,&quot;applicantIdentifier&quot;:&quot;${applicantIdentifier3}&quot;,&quot;readEnglish&quot;:null,&quot;writeEnglish&quot;:null,&quot;primarySpokenLang&quot;:null,&quot;primaryWrittenLang&quot;:null,&quot;otherSpokenLang&quot;:null,&quot;otherWrittenLang&quot;:null,&quot;country&quot;:null,&quot;residentOfApplyingState&quot;:null,&quot;withoutMedicalPlan&quot;:null,&quot;entitledToMedicare&quot;:null,&quot;isUSCitizen&quot;:null,&quot;isUSNationals&quot;:null,&quot;documentType&quot;:null,&quot;documentId&quot;:null,&quot;medicareName&quot;:null,&quot;medicareDate&quot;:null,&quot;planToReplaceCurrentCoverage&quot;:null,&quot;medicalRecord&quot;:null,&quot;pediatricDental&quot;:null,&quot;subscriberRelationship&quot;:null,&quot;applicantCommandEnglish&quot;:null,&quot;applicantLegallyInCapaciated&quot;:null,&quot;medicareNumber&quot;:null,&quot;usArrivalDate&quot;:null,&quot;turnOffPaper&quot;:null,&quot;emailForGHI&quot;:null,&quot;usResident&quot;:null,&quot;nativeAmerican&quot;:null,&quot;isDentalAttestation&quot;:null,&quot;isAccepted&quot;:null,&quot;userNotificationPreferencesMap&quot;:{&quot;mail&quot;:false,&quot;phone&quot;:false,&quot;email&quot;:false},&quot;productCategoryPcpDataMap&quot;:{&quot;medical&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}N001&quot;,&quot;pcpContact&quot;:null},&quot;dental&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;${state}S001&quot;,&quot;pcpContact&quot;:null},&quot;vision&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;11111&quot;,&quot;networkCode&quot;:&quot;ALL&quot;,&quot;pcpContact&quot;:null},&quot;commuter&quot;:{&quot;pcpId&quot;:null,&quot;pcpName&quot;:null,&quot;pcpNpi&quot;:null,&quot;isEstablishedPatient&quot;:null,&quot;issuer&quot;:&quot;99012&quot;,&quot;networkCode&quot;:null,&quot;pcpContact&quot;:null}},&quot;healthCoverage&quot;:null,&quot;healthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanName&quot;:null,&quot;otherHealthCoveragePlanPolicyNumber&quot;:null,&quot;usResident6Month&quot;:null,&quot;isAckSignMandatory&quot;:false,&quot;isAuthSignMandatory&quot;:false,&quot;deleted&quot;:false,&quot;applicantDeleted&quot;:false,&quot;applicantFullName&quot;:&quot;Akshat Kumar&quot;,&quot;open&quot;:false}],&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:&quot;Gaurav&quot;,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutDependentInfo/page/dependentInfo/?_dp=1434372132653&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372134318</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372135288</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Care Physician Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372163834&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;medical&quot;,&quot;pcpInfoList&quot;:[{&quot;applicantName&quot;:&quot;Gaurav&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;pcpName&quot;:&quot;nxcfvjkxsdjk&quot;,&quot;pcpIdentifier&quot;:&quot;jsvgfshdgfsgf&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Anshika&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;pcpName&quot;:&quot;nxcfvjkxsdjk&quot;,&quot;pcpIdentifier&quot;:&quot;jsvgfshdgfsgf&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akanchha&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;fhdsdssdhfh&quot;,&quot;pcpIdentifier&quot;:&quot;hjgfsdgfudd&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akshat&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;fhdsdssdhfh&quot;,&quot;pcpIdentifier&quot;:&quot;hjgfsdgfudd&quot;,&quot;planType&quot;:&quot;POS&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true,&quot;isDisabled&quot;:true}],&quot;isSpouseHasSamePcp&quot;:true,&quot;isDependentHasSamePcp&quot;:true,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372163834&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372164746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372165661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dentist Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372184140&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;dental&quot;,&quot;pcpInfoList&quot;:[{&quot;applicantName&quot;:&quot;Gaurav&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;pcpName&quot;:&quot;xnhcuidfe&quot;,&quot;pcpIdentifier&quot;:&quot;vfsdgysdd&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${empcode}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Anshika&quot;,&quot;relationshipType&quot;:&quot;SPOUSE&quot;,&quot;pcpName&quot;:&quot;xnhcuidfe&quot;,&quot;pcpIdentifier&quot;:&quot;vfsdgysdd&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember3}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akanchha&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;djfhsgsdhfji&quot;,&quot;pcpIdentifier&quot;:&quot;hgvsgdfe&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember2}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;open&quot;:true},{&quot;applicantName&quot;:&quot;Akshat&quot;,&quot;relationshipType&quot;:&quot;DEPENDENT&quot;,&quot;pcpName&quot;:&quot;djfhsgsdhfji&quot;,&quot;pcpIdentifier&quot;:&quot;hgvsgdfe&quot;,&quot;planType&quot;:&quot;HMO&quot;,&quot;memberIdentifier&quot;:&quot;${familyMember1}&quot;,&quot;isSearchEnable&quot;:true,&quot;providerUrl&quot;:null,&quot;isDisabled&quot;:true}],&quot;isSpouseHasSamePcp&quot;:true,&quot;isDependentHasSamePcp&quot;:true,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutPhysician/page/checkoutPhysicianInfo/?_dp=1434372184140&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/otherInsurancesPolicies/page/questions/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372185001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/otherInsurancesPolicies/page/questions/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/otherInsurancesPolicies/page/questions/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372185900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/otherInsurancesPolicies/page/questions/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantIdDep1 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">id2 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id3</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">id3 NOT found</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="If you have any other insurance policies, please provide that information below" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/otherInsurancesPolicies/page/questions/?_dp=1434372215535&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[{&quot;questionId&quot;:&quot;Already_A_Dependent_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;},{&quot;questionId&quot;:&quot;Covered_IN_MEDICARE_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;},{&quot;questionId&quot;:&quot;COVERED_IN_TRICARE_QUESTION&quot;,&quot;questionResponse&quot;:&quot;no&quot;}],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[{&quot;id&quot;:${id1},&quot;questionIdentifier&quot;:&quot;Already_A_Dependent_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:10,&quot;label&quot;:&quot;label.already.dependent.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Are you covered as a dependent on someone else&apos;s policy?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false},{&quot;id&quot;:${id2},&quot;questionIdentifier&quot;:&quot;Covered_IN_MEDICARE_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:20,&quot;label&quot;:&quot;label.covered.in.medicare.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Do you currently receive benefits from Medicare or Medicaid?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false},{&quot;id&quot;:${id3},&quot;questionIdentifier&quot;:&quot;COVERED_IN_TRICARE_QUESTION&quot;,&quot;questionGroup&quot;:&quot;OtherInsurancesPolicies&quot;,&quot;order&quot;:30,&quot;label&quot;:&quot;label.covered.in.tricare.question&quot;,&quot;groupByApplicant&quot;:true,&quot;cssClass&quot;:&quot;null&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;picklistName&quot;:&quot;yesNoList&quot;,&quot;answerType&quot;:&quot;RADIO&quot;,&quot;mandatory&quot;:true,&quot;displayQuestion&quot;:&quot;Do you currently receive benefits from TRICARE or the Veterans Benefits Administration?&quot;,&quot;value&quot;:&quot;no&quot;,&quot;answer&quot;:false}]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/otherInsurancesPolicies/page/questions/?_dp=1434372215535&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/beneficiaryInfo/page/beneficiaryInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372216653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/beneficiaryInfo/page/beneficiaryInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/beneficiaryInfo/page/beneficiaryInfo/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372218909</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/beneficiaryInfo/page/beneficiaryInfo/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Life Basic Life Beneficiary Information" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/beneficiaryInfo/page/beneficiaryInfo/?_dp=1434372250391&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:null,&quot;acknowledgementDTOs&quot;:null,&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:&quot;BASICLIFE&quot;,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:[],&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/beneficiaryInfo/page/beneficiaryInfo/?_dp=1434372250391&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/view/section/checkoutAcknowledgement/page/acknowledgement/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372251199</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/view/section/checkoutAcknowledgement/page/acknowledgement/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutAcknowledgement/page/acknowledgement/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372252081</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutAcknowledgement/page/acknowledgement/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submitt Enrolment" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkout/{identifier}/section/checkoutAcknowledgement/page/acknowledgement/?_dp=1434372270794&amp;t=" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;isLargeGroupEmployer&quot;:false,&quot;coveredMembers&quot;:[],&quot;applicants&quot;:null,&quot;flowDTO&quot;:null,&quot;issuers&quot;:[{&quot;productCategories&quot;:[&quot;medical&quot;,&quot;vision&quot;,&quot;BASICLIFE&quot;,&quot;dental&quot;],&quot;issuerMarketingName&quot;:&quot;BlueSky&quot;,&quot;issuerCode&quot;:&quot;11111&quot;},{&quot;productCategories&quot;:[&quot;commuter&quot;],&quot;issuerMarketingName&quot;:&quot;Wageworks&quot;,&quot;issuerCode&quot;:&quot;99012&quot;}],&quot;acknowledgementDTOs&quot;:[{&quot;firstName&quot;:&quot;Gaurav&quot;,&quot;lastName&quot;:&quot;Upadhyay&quot;,&quot;memeberId&quot;:&quot;${empcode}&quot;,&quot;name&quot;:&quot;Gaurav Upadhyay&quot;,&quot;signDate&quot;:null,&quot;relationship&quot;:{&quot;name&quot;:&quot;SELF&quot;,&quot;relationshipType&quot;:&quot;SELF&quot;,&quot;id&quot;:1,&quot;wigCode&quot;:&quot;SELF&quot;,&quot;dsiplayName&quot;:null,&quot;spouse&quot;:false,&quot;self&quot;:true,&quot;dependent&quot;:false,&quot;relationshipName&quot;:&quot;Primary-Applicant&quot;}}],&quot;enrollmentIdentifier&quot;:&quot;${identifier}&quot;,&quot;enrollmentDTODB&quot;:null,&quot;primaryApplicantFirstName&quot;:null,&quot;primaryApplicantLastName&quot;:null,&quot;declinedReasonPicklist&quot;:null,&quot;declinedCoverageDTOs&quot;:null,&quot;productCategory&quot;:null,&quot;pcpInfoList&quot;:null,&quot;isSpouseHasSamePcp&quot;:null,&quot;isDependentHasSamePcp&quot;:null,&quot;otherInsurancesPoliciesDTO&quot;:{&quot;questionsResponse&quot;:[],&quot;priorHealthCoverage&quot;:[],&quot;otherInsurancesPoliciesQuestions&quot;:[]},&quot;beneficiaryDetailDTOs&quot;:null,&quot;signature&quot;:null,&quot;showSkip&quot;:false,&quot;showBack&quot;:true,&quot;showNext&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkout/${identifier}/section/checkoutAcknowledgement/page/acknowledgement/?_dp=1434372270794&amp;t=</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-Token" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-Token</stringProp>
                  <stringProp name="Header.value">${csrf}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkoutsummary/{identifier}/view/section/checkoutSummary/page/checkoutSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372272205</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkoutsummary/${identifier}/view/section/checkoutSummary/page/checkoutSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/checkoutsummary/{identifier}/section/checkoutSummary/page/checkoutSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372273997</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/checkoutsummary/${identifier}/section/checkoutSummary/page/checkoutSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Your information has been submitted to the appropriate insurance and other benefit companies." enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/enrollmentBenefitSummary/view/section/checkOut/page/enrollmentBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372284756</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/enrollmentBenefitSummary/view/section/checkOut/page/enrollmentBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/workflow/enrollmentBenefitSummary/section/checkOut/page/enrollmentBenefitSummary/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_dp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_dp</stringProp>
                  <stringProp name="Argument.value">1434372286327</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/employee/workflow/enrollmentBenefitSummary/section/checkOut/page/enrollmentBenefitSummary/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="logout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/employee/logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${exchange}.${url}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${trf}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/employee/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${trf}://${exchange}.${url}:8080/employee/flow</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
